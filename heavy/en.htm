<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<head><title>The heavy number</title>
	<meta http-equiv=Content-Type content="charset=utf-8">
	<link href="/theme.css" rel=stylesheet>
	<link href="/article.css" rel=stylesheet>
	<style type="text/css">
	@font-face
	{
		font-family: Consolas;
		src: url('/consola.ttf');
	}
	</style>
</head><body>
	<h1 align=center>The <em>heavy</em> number</h1>
<div style="float:right; text-indent:0em; width:205px;  border-radius:4px;  border:solid #ddd 1px;  text-align:center;  padding:8px;  font-size:12px">
	<a href="zh.htm" style="font-family:'microsoft yahei',sans-serif; color:#aaa; text-decoration:none"><img alt=zh src=zh.png align=absmiddle style=border:0> 中文&nbsp;</a>
	<a href="ja.htm" style="font-family:'microsoft yahei',sans-serif; color:#aaa; text-decoration:none"><img alt=ja src=ja.png align=absmiddle style=border:0> 日本語&nbsp;</a>
	<a href="en.htm" style="font-family:'microsoft yahei',sans-serif; color:#aaa; text-decoration:none"><img alt=en src=en.png align=absmiddle style=border:0> English&nbsp;</a>
</div>

	<h2>1. Preface<img alt="bamboo slip" src="bamboo%20slip.png" width=104 height=88 align=absmiddle></h2>

	<div>今有高精度之术，惟听而无迅捷者。夫灵感者，碎之端也。生之紊乱而郁积在心，遂撰于素缟以志之。每尝夙兴夜寐，惨淡经营，数百天，则终得聚，逢人遍述其旨。告之曰：“__asm__既出，举座皆惊！”而无人识高精度法巧妙绝伦也，或哂，或嗤，或以眉，或不顾。呜呼！周文王著《易》狱中，其言也厉；吾侪发于无产之家，学以饱暖焉，不可大事。然则奇技精于苦练而家财不怙；今友虽鲜，来者必遇。余尝理化骈亡<sup>①</sup>而coding不辍，期年问世，继而形销骨立而实心有衷，如轻抚CYF久之，云云。此与共志者勉。</div>
	<div>①：这里指物理跟化学都没及格。</div>

	<h2>2. The high-precision makes OI (Olympiad in Informatics) more colorful</h2>

	<div>When you click on this plain hyperlink, a new skill is gently walking to you. Are there such ideas emerging in your mind: May I eat some high-precisions? Is it really necessary to take the high-precision course from you? Actually, high-precisions aren't far away from us. OIer's CSP, NOIP, NOI, IOI are all dependent on high-precision. So, what is high-precision?</div>
	<div>It was a long process for OIers to be aware of high-precision and treat it as an individual algorithm. In the childhood, during the struggle against the author's tumour, OIers had learned to use arrays and simple loops, improved their development envirenment, hence become more intelligent and powerful. Then OIers gradually found the changes of some values, like as if you add another large number onto an unsigned integer (e.g. <em>unsigned int</em>), the carry flag will be set. In this way, during understanding and utilizing these value changes from time to time, OIers produced utilities for programming, such as high-precision addition,  high-precision subtraction, etc., providing with more coding and exercising templates, where OIers rely more and more.</div>
	<div>High-precisions are algorithms that research representing, displaying, calculating and comparing quantities other than built-in types, who make OI life happier.</div>

	<h2>3. Representing a heavy Number</h2>
	<div>Here is one way to represent a heavy number for high-precision.</div>
	<ul>
		<li>First, visualize some data, functions, appearances and algorithms.
		<li>Next, fill the heavy class declaration with this imagination.
		<li>Then, set the class declaration aside and implement it with the heavy class definition.
		<li>When it is ready, save the class definition as an individual file and test it with a g++ compiler.
		<li>Finally, format the class definition into a sensible style and distribute it with documents like comments and figures.
	</ul>
	<div>Now we are going into the details.</div>
	<div>We are going to define a high-precision type. Let's call it <em>heavy</em>. In C++, you can employ the keyword <b>struct</b> or <b>class</b> to declare a data type, in this way:</div>
<pre><ul><li><p class=r>class <p class=i>heavy<p class=y>;</ul></pre>
	<div>Firstly, let's think about a what a heavy number should be like. A heavy number shouldn't only occupy 4 bytes or 8 bytes like a int or a long long, for it needs more spaces to store a bigger number. </div>
	<div>Actually, A heavy number needs 128 bytes. As the unsigned char represents the range 0 to 255, the unsigned short represents the range 0 to 65535,
	 the unsigned int represents the range 0 to 4294967295, and the unsigned long long, which is 8 bytes, represents the range 0 to 18446744073709551615, a heavy can hold a number from 0 to 2<sup>1024</sup>-1, i.e. <span style="word-break: break-all">179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216</span>(≈1.798×10<sup>308</sup>). What a gargantuan quantity! Your monitor finds it hard to display this number and wraps it to several lines.</div>
	<div>A 128-byte memory block is declared. </div>
<pre><ul><li><p class=r>class <p class=i>heavy<p class=y>{<p class=r>unsigned <p class=i>d<p class=y>[<p class=n>32<p class=y>];</ul></pre>
	<table style="font-size:30px">
	<tr>
		<td style="border: solid 1px" width=150 align=center>d[0]</td>
		<td style="border: solid 1px" width=150 align=center>d[1]</td>
		<td style="border: solid 1px" width=150 align=center>d[2]</td>
		<td style="border: solid 1px" width=150 align=center>d[3]</td>
		<td style="border: solid 1px" width=150 align=center>d[4]</td>
		<td style="border: solid 1px" width=150 align=center>. . . . . .</td>
		<td style="border: solid 1px" width=150 align=center>d[29]</td>
		<td style="border: solid 1px" width=150 align=center>d[30]</td>
		<td style="border: solid 1px" width=150 align=center>d[31]</td>
	</tr>
	<tr>
		<td>d</td>
		<td>d+4</td>
		<td>d+8</td>
		<td>d+12</td>
		<td>d+16</td>
		<td></td>
		<td>d+116</td>
		<td>d+120</td>
		<td>d+124</td>
	</tr>
	</table>
	
	<table frame=box align=right>
	<tr>
		<td>Did you know...</td><!--你知道吗？-->
		<td rowspan=2><img src=question.png alt=question></td>
	</tr>
	<tr> <td>16<sup>0</sup>=1 16<sup>1</sup>=16</td> </tr>
	<tr> <td>16<sup>2</sup>=256</td> <td>16<sup>3</sup>=4096</td> </tr>
	<tr><td colspan=2>16<sup>4</sup>=65536</td></tr>
	<tr><td colspan=2>16<sup>5</sup>=1048576</td></tr>
	<tr><td colspan=2>16<sup>6</sup>=16777216</td></tr>
	<tr><td colspan=2>16<sup>7</sup>=268435456</td></tr>
	<tr><td colspan=2>16<sup>8</sup>=4294967296</td></tr>
	</table>
	
	
	<h2>4. Addition and Subtraction</h2>
	<!--<div>It is the easiest to add and subtract, </div>-->
	<div>You may ask me: "Are you sure to do some arithmetic calculations? The I/O parts of your so-called heavy type haven't been even finished yet!" My answer is: Yes. Because the input and output were kind of difficult, the addition and subtraction writing was complete in the first place. Incidentally, they are under the same title because they themselves are nearly the same!</div>

	<h2>5. Input/Output (I/O)</h2>
	<div>The structured programming has been widely praised for its clarity and simplicity, as it leads programmers to <em>top-down</em> design. Worrying whether you can understand inline assembly, here we developed a memory aid, the C++ version who has the same algorithm and effect. It can run just as well. Bonam fortūnam (Good luck)!</div>
	<table border=1 align=right><tr><td><a href=Output.cpp>Download this code (without comments)</a></td></tr></table>
<pre><ol><li><p class=r>operator char<p class=y>*() <p class=r>const
<li><p class=y>{ <p class=c>//Real Distribution / β version
<li>	<p class=r>static long long <p class=i>b<p class=y>[<p class=n>320<p class=y>];
<li>	<p class=r>int <p class=i>length <p class=y>= <p class=n>1<p class=y>; <p class=c>//length &lt;-- r9
<li>	<p class=i>b<p class=y>[<p class=n>319<p class=y>] = <p class=n>0<p class=y>;
<li>	<p class=r>for <p class=y>(<p class=r>int <p class=i>i <p class=y>= <p class=n>32<p class=y>; <p class=i>i<p class=y>; <p class=i>i<p class=y>--) <p class=c>//i &lt;-- r8
<li>	<p class=y>{
<li><p class=c>/*0:*/
<li>		<p class=r>long long <p class=i>D <p class=y>= <p class=i>d<p class=y>[<p class=i>i <p class=y>- <p class=n>1<p class=y>]; <p class=c>//Here lies lodsl
<li>			<p class=c>//D (Dividend) &lt;-- rax
<li>			<p class=c>//d[i - 1] &lt;-- (rsi)
<li>		<p class=r>long long <p class=i>q<p class=y>; <p class=c>//q (Quotient) &lt;-- rdx
<li>		<p class=r>for <p class=y>(<p class=r>int <p class=i>j <p class=y>= <p class=i>length<p class=y>; <p class=i>j<p class=y>; <p class=i>j<p class=y>--) <p class=c>//j &lt;-- rcx
<li>		<p class=y>{
<li><p class=c>/*1:*/
<li>			<p class=i>D <p class=y>+= <p class=i>b<p class=y>[<p class=n>319 <p class=y>- <p class=i>length <p class=y>+ <p class=i>j<p class=y>] * <p class=n>0x100000000<p class=y>; 
<li>				<p class=c>//b[319 - length + j] &lt;-- (rdi)
<li>				<p class=c>//b[319 - length + j] * 0x10000000 &lt;-- (rdi - 4)
<li>					<p class=c>//shift left 32 positions
<li>			<p class=c>//The beginning of division
<li>			<p class=i>q <p class=y>= <p class=i>D <p class=y>/ <p class=n>10<p class=y>;
<li>			<p class=i>D <p class=y>-= <p class=i>q <p class=y>* <p class=n>10<p class=y>; <p class=c>//RAX was subtracted by RDX * 10
<li>			<p class=i>b<p class=y>[<p class=n>319 <p class=y>- <p class=i>length <p class=y>+ <p class=i>j<p class=y>] = <p class=i>D<p class=y>; <p class=c>//Here lies stosq
<li>			<p class=i>D <p class=y>= <p class=i>q<p class=y>; <p class=c>//The quotient is the dividend next time
<li>		<p class=y>}
<li>		<p class=r>while <p class=y>(<p class=i>D<p class=y>) <p class=c>//Develop new spaces, until the quotient is 0
<li>		<p class=y>{
<li>			<p class=c>//b[319 - length + j] is treated as 0
<li>			<p class=i>q <p class=y>= <p class=i>D <p class=y>/ <p class=n>10<p class=y>;
<li>			<p class=i>D <p class=y>-= <p class=i>q <p class=y>* <p class=n>10<p class=y>;
<li>			<p class=i>b<p class=y>[<p class=n>319 <p class=y>- <p class=i>length<p class=y>++] = <p class=i>D<p class=y>;
<li>			<p class=i>D <p class=y>= <p class=i>q<p class=y>;
<li>		<p class=y>}
<li>	<p class=y>}
<li><p class=c>//All digits have been adjusted properly
<li><p class=c>//Start to gather digits
<li>	<p class=r>char<p class=y>* <p class=i>d <p class=y>= (<p class=r>char<p class=y>*) <p class=i>b<p class=y>; <p class=c>//d &lt;-- rdi
<li>	<p class=r>for <p class=y>(<p class=r>int <p class=i>i <p class=y>= <p class=n>1<p class=y>; <p class=i>i <p class=y>&lt;= <p class=i>length<p class=y>; <p class=i>i<p class=y>++)
<li>		<p class=i>d<p class=y>[<p class=i>i <p class=y>- <p class=n>1<p class=y>] = <p class=i>b<p class=y>[<p class=n>319 <p class=y>- <p class=i>length <p class=y>+ <p class=i>i<p class=y>] + <p class=i>'0'<p class=y>; <p class=c>// b[319 - length + i] &lt;-- (rsi)
<li>	<p class=i>d<p class=y>[<p class=i>length<p class=y>] = <p class=i>'\0'<p class=y>;
<li>	<p class=r>return <p class=i>d<p class=y>;
<li><p class=y>}
</ol></pre>
	<div>"A &lt;-- B" means B represents A, A corresponds B, and A is the counterpart of B. Which means, they're storing the same data, and they're equivalent.</div>

	<h2>7. Multiplication<img style="float:right" src=Multiplication.jpg alt=Multiplication width=204></h2>

	<h2>8. Division</h2>
	<div>Life is too short. I don't want division.</div>
	<img src=Building.png width=68 height=88 alt=Building>
	Building...

	<h2>9. Reference Books</h2>
	<ol>
		<li>《<a href="化学%20八年级.pdf">义务教育教科书 化学 八年级</a>》（五四学制）
		<li>《<a href="义务教育教科书%20英语%20八年级上册%2014596583.pdf">义务教育教科书 英语 八年级上册</a>》P<sub>61</sub> (Making a turkey dinner)
		<li><em><a href="Professional%20Assembly%20Language.pdf">Professional Assembly Language</a>, Chapter 13</em>
		<li><a href="IA32%20Manual%20Volume%202A,%20Instruction%20Set%20Reference1.pdf"><em>IA-32 Intel<sup>&reg;</sup> Architecture Software Developer's Manual, Volume 2A: Instruction Set Reference, A-M</em></a>
		<li><a href="IA32%20Manual%20Volume%202B,%20Instruction%20Set%20Reference2.pdf"><em>IA-32 Intel<sup>&reg;</sup> Architecture Software Developer's Manual, Volume 2B: Instruction Set Reference, N-Z</em></a>
	</ol>

	<div>Bye-bye<a href=B00CFJK0XG.01.S005.JUMBOXXX.jpg style=text-decoration:none>~</a></div>
</body>
